# ===============================================================================
# GU√çA COMPLETA DE ENDPOINTS PARA PROBAR EL FLUJO END-TO-END
# ===============================================================================
# Este archivo contiene todos los endpoints necesarios para probar el flujo completo:
# 1. Crear Challenge
# 2. Agregar Code Version
# 3. Agregar Tests
# 4. Publicar Challenge
# 5. Crear Solution (estudiante)
# 6. Submit Solution ‚Üí CodeRunner ‚Üí Kafka ‚Üí Profile Service
#
# IMPORTANTE: Reemplaza los IDs generados en cada paso en los pasos siguientes
# ===============================================================================

### Variables (Actualiza estos valores con los IDs reales generados)
@baseUrl = http://localhost:8082
@teacherId = 550e8400-e29b-41d4-a716-446655440000
@studentId = 660e8400-e29b-41d4-a716-446655440001
@challengeId = REEMPLAZAR_CON_ID_GENERADO
@codeVersionId = REEMPLAZAR_CON_ID_GENERADO
@solutionId = REEMPLAZAR_CON_ID_GENERADO

# ===============================================================================
# PASO 1: CREAR UN NUEVO CHALLENGE
# ===============================================================================
# Endpoint: POST /api/v1/challenges
# Descripci√≥n: Crea un nuevo challenge con puntos de experiencia

### 1. Crear Challenge
POST {{baseUrl}}/api/v1/challenges
Content-Type: application/json

{
  "teacherId": "{{teacherId}}",
  "name": "Suma de Dos N√∫meros",
  "description": "Implementa una funci√≥n que sume dos n√∫meros enteros",
  "experiencePoints": 50,
  "difficulty": "EASY"
}

# RESPUESTA ESPERADA:
# Status: 201 Created
# Body: { "id": "uuid-del-challenge", ... }
#
# ‚ö†Ô∏è COPIAR EL "id" GENERADO Y REEMPLAZAR @challengeId arriba

# ===============================================================================
# PASO 2: AGREGAR CODE VERSION AL CHALLENGE
# ===============================================================================
# Endpoint: POST /api/v1/challenges/{challengeId}/code-versions
# Descripci√≥n: Agrega una versi√≥n de c√≥digo (lenguaje + plantilla inicial)

### 2. Agregar Code Version
POST {{baseUrl}}/api/v1/challenges/{{challengeId}}/code-versions
Content-Type: application/json

{
  "language": "PYTHON",
  "defaultCode": "def sum_two_numbers(a, b):\n    # Tu c√≥digo aqu√≠\n    pass\n\nif __name__ == '__main__':\n    a = int(input())\n    b = int(input())\n    print(sum_two_numbers(a, b))"
}

# RESPUESTA ESPERADA:
# Status: 201 Created
# Body: { "id": "uuid-del-code-version", ... }
#
# ‚ö†Ô∏è COPIAR EL "id" GENERADO Y REEMPLAZAR @codeVersionId arriba

# ===============================================================================
# PASO 3: AGREGAR TESTS A LA CODE VERSION
# ===============================================================================
# Endpoint: POST /api/v1/challenges/{challengeId}/code-versions/{codeVersionId}/tests
# Descripci√≥n: Agrega tests que validar√°n la soluci√≥n del estudiante

### 3.1. Agregar Test 1
POST {{baseUrl}}/api/v1/challenges/{{challengeId}}/code-versions/{{codeVersionId}}/tests
Content-Type: application/json

{
  "input": "2\n3",
  "expectedOutput": "5",
  "failureMessage": "La suma de 2 + 3 debe ser 5"
}

### 3.2. Agregar Test 2
POST {{baseUrl}}/api/v1/challenges/{{challengeId}}/code-versions/{{codeVersionId}}/tests
Content-Type: application/json

{
  "input": "10\n20",
  "expectedOutput": "30",
  "failureMessage": "La suma de 10 + 20 debe ser 30"
}

### 3.3. Agregar Test 3
POST {{baseUrl}}/api/v1/challenges/{{challengeId}}/code-versions/{{codeVersionId}}/tests
Content-Type: application/json

{
  "input": "-5\n5",
  "expectedOutput": "0",
  "failureMessage": "La suma de -5 + 5 debe ser 0"
}

### 3.4. Agregar Test 4
POST {{baseUrl}}/api/v1/challenges/{{challengeId}}/code-versions/{{codeVersionId}}/tests
Content-Type: application/json

{
  "input": "100\n200",
  "expectedOutput": "300",
  "failureMessage": "La suma de 100 + 200 debe ser 300"
}

# RESPUESTA ESPERADA (para cada test):
# Status: 201 Created
# Body: { "id": "uuid-del-test", "input": "...", "expectedOutput": "..." }

# ===============================================================================
# PASO 4: PUBLICAR EL CHALLENGE
# ===============================================================================
# Endpoint: PATCH /api/v1/challenges/{challengeId}
# Descripci√≥n: Cambia el estado del challenge a PUBLISHED para que est√© disponible

### 4. Publicar Challenge
PATCH {{baseUrl}}/api/v1/challenges/{{challengeId}}
Content-Type: application/json

{
  "status": "PUBLISHED"
}

# RESPUESTA ESPERADA:
# Status: 200 OK
# Body: { "id": "...", "status": "PUBLISHED", ... }

# ===============================================================================
# PASO 5: VERIFICAR CHALLENGE PUBLICADO
# ===============================================================================
# Endpoint: GET /api/v1/challenges
# Descripci√≥n: Obtiene todos los challenges publicados

### 5. Listar Challenges Publicados
GET {{baseUrl}}/api/v1/challenges

# ===============================================================================
# PASO 6: OBTENER DETALLES DEL CHALLENGE
# ===============================================================================
# Endpoint: GET /api/v1/challenges/{challengeId}
# Descripci√≥n: Obtiene los detalles completos del challenge

### 6. Obtener Challenge por ID
GET {{baseUrl}}/api/v1/challenges/{{challengeId}}

# ===============================================================================
# PASO 7: CREAR UNA SOLUCI√ìN (ESTUDIANTE)
# ===============================================================================
# Endpoint: POST /api/v1/solutions
# Descripci√≥n: El estudiante crea una soluci√≥n inicial para el challenge

### 7. Crear Solution
POST {{baseUrl}}/api/v1/solutions
Content-Type: application/json

{
  "challengeId": "{{challengeId}}",
  "codeVersionId": "{{codeVersionId}}",
  "studentId": "{{studentId}}",
  "code": "def sum_two_numbers(a, b):\n    # Tu c√≥digo aqu√≠\n    pass\n\nif __name__ == '__main__':\n    a = int(input())\n    b = int(input())\n    print(sum_two_numbers(a, b))"
}

# RESPUESTA ESPERADA:
# Status: 201 Created
# Body: { "id": "uuid-de-la-solution", ... }
#
# ‚ö†Ô∏è COPIAR EL "id" GENERADO Y REEMPLAZAR @solutionId arriba

# ===============================================================================
# PASO 8: ACTUALIZAR LA SOLUCI√ìN CON C√ìDIGO DEL ESTUDIANTE
# ===============================================================================
# Endpoint: PUT /api/v1/solutions/{solutionId}
# Descripci√≥n: El estudiante actualiza su c√≥digo antes de hacer submit

### 8. Actualizar Solution
PUT {{baseUrl}}/api/v1/solutions/{{solutionId}}
Content-Type: application/json

{
  "code": "def sum_two_numbers(a, b):\n    return a + b\n\nif __name__ == '__main__':\n    a = int(input())\n    b = int(input())\n    print(sum_two_numbers(a, b))",
  "language": "PYTHON"
}

# RESPUESTA ESPERADA:
# Status: 200 OK
# Body: { "id": "...", "code": "...", ... }

# ===============================================================================
# PASO 9: SUBMIT DE LA SOLUCI√ìN PARA EVALUACI√ìN
# ===============================================================================
# Endpoint: POST /api/v1/solutions/{solutionId}/submit
# Descripci√≥n: Env√≠a la soluci√≥n para evaluaci√≥n
#
# ‚≠ê ESTE ES EL ENDPOINT CLAVE QUE:
# 1. Env√≠a el c√≥digo al CodeRunner (gRPC)
# 2. Ejecuta los tests
# 3. Calcula los puntos ganados
# 4. Publica evento a Kafka ‚Üí Profile Service
#
# FLUJO INTERNO:
# SolutionController ‚Üí SolutionCommandServiceImpl.handle(SubmitSolutionCommand)
# ‚Üí CodeRunnerExecutionService (gRPC)
# ‚Üí Calcula puntos (l√≠nea 156-161 de SolutionCommandServiceImpl)
# ‚Üí Publica ChallengeCompletedEvent a Kafka (l√≠nea 173-192)
# ‚Üí Profile Service consume el evento y actualiza el score del estudiante

### 9. Submit Solution
POST {{baseUrl}}/api/v1/solutions/{{solutionId}}/submit
Content-Type: application/json

{
  "studentId": "{{studentId}}",
  "code": "def sum_two_numbers(a, b):\n    return a + b\n\nif __name__ == '__main__':\n    a = int(input())\n    b = int(input())\n    print(sum_two_numbers(a, b))"
}

# RESPUESTA ESPERADA:
# Status: 200 OK
# Body: {
#   "solutionReportId": "uuid",
#   "message": "Solution executed via CodeRunner. All tests passed. 4 out of 4 tests passed (100.0%). Score: 50/50 points. Execution time: 123 ms",
#   "success": true,
#   "approvedTestIds": ["test-id-1", "test-id-2", "test-id-3", "test-id-4"],
#   "totalTests": 4,
#   "passedTests": 4,
#   "executionDetails": "Execution completed in 123 ms. Score: 50/50 points",
#   "timeTaken": 123.0
# }

# üì§ EVENTO KAFKA PUBLICADO (si pointsEarned > 0):
# T√≥pico: challenge-completed (configurado en application.properties)
# Payload:
# {
#   "studentId": "660e8400-e29b-41d4-a716-446655440001",
#   "challengeId": "uuid-del-challenge",
#   "solutionId": "uuid-de-la-solution",
#   "experiencePointsEarned": 50,  ‚Üê PUNTOS GANADOS
#   "totalExperiencePoints": 50,   ‚Üê PUNTOS M√ÅXIMOS
#   "passedTests": 4,
#   "totalTests": 4,
#   "allTestsPassed": true,
#   "executionTimeMs": 123,
#   "completedAt": "2025-10-18T10:30:00",
#   "occurredOn": "2025-10-18T10:30:00"
# }

# ===============================================================================
# PASO 10: CONSULTAR LA SOLUCI√ìN ACTUALIZADA
# ===============================================================================
# Endpoint: GET /api/v1/solutions/{solutionId}
# Descripci√≥n: Verifica que la soluci√≥n tiene el score asignado

### 10. Obtener Solution con Score
GET {{baseUrl}}/api/v1/solutions/{{solutionId}}

# RESPUESTA ESPERADA:
# Status: 200 OK
# Body: {
#   "id": "uuid",
#   "challengeId": "uuid",
#   "codeVersionId": "uuid",
#   "studentId": "uuid",
#   "attempts": 1,
#   "code": "...",
#   "lastAttemptAt": "2025-10-18T10:30:00",
#   "status": "SUBMITTED",
#   "pointsEarned": 50,  ‚Üê PUNTOS GANADOS
#   "maxPoints": 50,     ‚Üê PUNTOS M√ÅXIMOS
#   "successPercentage": 100.0
# }

# ===============================================================================
# ENDPOINTS ADICIONALES √öTILES
# ===============================================================================

### Obtener Solution por Student y CodeVersion
GET {{baseUrl}}/api/v1/solutions/students/{{studentId}}/code-versions/{{codeVersionId}}

### Obtener Solution por Challenge, CodeVersion y Student
GET {{baseUrl}}/api/v1/solutions/challenges/{{challengeId}}/code-versions/{{codeVersionId}}/students/{{studentId}}

### Listar Code Versions de un Challenge
GET {{baseUrl}}/api/v1/challenges/{{challengeId}}/code-versions

### Listar Tests de una Code Version
GET {{baseUrl}}/api/v1/challenges/{{challengeId}}/code-versions/{{codeVersionId}}/tests

### Obtener Challenge por Teacher ID
GET {{baseUrl}}/api/v1/challenges/teachers/{{teacherId}}

# ===============================================================================
# NOTAS IMPORTANTES
# ===============================================================================
#
# 1. ESTRATEGIA DE PUNTUACI√ìN:
#    - Solo se otorgan puntos si TODOS los tests pasan (all-or-nothing)
#    - Ver SolutionCommandServiceImpl.calculateScore() l√≠neas 255-275
#    - Si quieres puntos proporcionales, descomenta la l√≠nea 271
#
# 2. EVENTO KAFKA:
#    - Solo se publica si pointsEarned > 0
#    - Ver SolutionCommandServiceImpl l√≠neas 173-192
#    - Topic configurado en: kafka.topics.challenge-completed
#
# 3. PREREQUISITOS:
#    - CodeRunner microservice debe estar corriendo (gRPC)
#    - Kafka debe estar corriendo
#    - Profile Service debe estar escuchando el t√≥pico Kafka
#
# 4. VERIFICACI√ìN DEL FLUJO:
#    - Revisa los logs del microservicio Challenges (b√∫sca los emojis üéØ üì§ ‚úÖ)
#    - Verifica que Kafka recibi√≥ el evento
#    - Verifica que Profile Service actualiz√≥ el score del estudiante
#
# 5. ARCHIVO DE C√ìDIGO FUENTE:
#    - Controlador: src/main/java/.../solutions/interfaces/rest/SolutionController.java:121-163
#    - Servicio: src/main/java/.../solutions/application/internal/commandservices/SolutionCommandServiceImpl.java:54-227
#    - Evento: src/main/java/.../solutions/domain/model/events/ChallengeCompletedEvent.java
#    - Kafka: src/main/java/.../shared/infrastructure/messaging/kafka/KafkaProducerService.java:37-62
#
# ===============================================================================
